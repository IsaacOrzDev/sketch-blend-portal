/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/": {
    get: operations["AppController_healthCheck"];
  };
  "/auth/google/authenticate": {
    post: operations["AuthController_authenticateGoogleUser"];
  };
  "/auth/github/authenticate": {
    post: operations["AuthController_authenticateGithubUser"];
  };
  "/auth/password-less/send-email": {
    post: operations["AuthController_sendEmailForPasswordLess"];
  };
  "/auth/password-less/authenticate": {
    post: operations["AuthController_AuthenticatePasswordLessLogin"];
  };
  "/auth/access-token/verify": {
    post: operations["AuthController_verifyAccessToken"];
  };
  "/generator/predict": {
    get: operations["GeneratorController_predict"];
  };
  "/generator/predict/{documentId}/scribble": {
    post: operations["GeneratorController_scribblePredict"];
  };
  "/generator/predict/{documentId}/caption": {
    post: operations["GeneratorController_CaptionPredict"];
  };
  "/documents": {
    get: operations["DocumentController_getList"];
  };
  "/documents/{id}": {
    get: operations["DocumentController_getOne"];
    delete: operations["DocumentController_deleteDocument"];
    patch: operations["DocumentController_updateDocument"];
  };
  "/documents/{id}/image": {
    get: operations["DocumentController_getImage"];
  };
  "/documents/create": {
    post: operations["DocumentController_saveDocument"];
  };
  "/documents/create/empty": {
    post: operations["DocumentController_saveEmptyDocument"];
  };
  "/posts": {
    get: operations["PostController_getList"];
  };
  "/posts/user": {
    get: operations["PostController_getListByUser"];
  };
  "/posts/{id}": {
    get: operations["PostController_getOne"];
    delete: operations["PostController_delete"];
  };
  "/posts/create": {
    post: operations["PostController_create"];
  };
  "/posts/{id}/like": {
    post: operations["PostController_like"];
  };
  "/posts/{id}/unlike": {
    post: operations["PostController_unlike"];
  };
  "/testing/access-token/generate": {
    post: operations["TestingController_generateAccessToken"];
  };
  "/testing/auth/test": {
    get: operations["TestingController_getTesting"];
  };
  "/testing/auth/password-less/generate": {
    post: operations["TestingController_generatePasswordLessToken"];
  };
  "/testing/bucket/upload": {
    post: operations["TestingController_uploadFile"];
  };
  "/testing/image/size": {
    get: operations["TestingController_getImageSize"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    AuthenticateGithubUserDto: {
      code: string;
    };
    AuthenticateResponse: {
      /** @default true */
      success: boolean;
      /** Format: date-time */
      expiresAtUtc: string;
      accessToken: string;
      isFirstTime: boolean;
    };
    ErrorResponse: {
      statusCode: number;
      message: string[];
    };
    SendEmailForPasswordLessDto: {
      email: string;
      username: string | null;
    };
    VerifyTokenDto: {
      token: string;
    };
    VerifyTokenResponse: {
      userId: string;
      username: string;
      email: string | null;
      imageUrl: string | null;
    };
    PredictResponse: {
      urls: string[];
    };
    ScribblePredictBody: {
      prompt: string;
    };
    DocumentRecord: {
      id: string;
      title: string;
      description: string | null;
      svg: string | null;
      image: string | null;
      paths: Record<string, unknown> | null;
    };
    GetDocumentListResponse: {
      records: components["schemas"]["DocumentRecord"][];
    };
    DocumentDetailRecord: {
      id: string;
      title: string;
      description: string | null;
      svg: string | null;
      image: string | null;
      paths: Record<string, unknown> | null;
    };
    GetDocumentResponse: {
      record: components["schemas"]["DocumentDetailRecord"];
    };
    SaveDocumentResponse: {
      id: string;
    };
    SaveDocumentDto: {
      title: string;
      description: string | null;
      svg: string | null;
      image: string | null;
      paths: Record<string, unknown> | null;
    };
    UpdateDocumentDto: {
      id: string;
      data: components["schemas"]["SaveDocumentDto"];
    };
    UserInfo: {
      name: string;
      imageUrl: string | null;
    };
    ImageInfo: {
      width: number;
      height: number;
    };
    PostRecord: {
      id: string;
      prompt: string;
      imageUrl: string;
      sourceImageUrl: string;
      userInfo: components["schemas"]["UserInfo"];
      imageInfo: components["schemas"]["ImageInfo"];
      sourceImageInfo: components["schemas"]["ImageInfo"];
    };
    GetPostListResponse: {
      records: components["schemas"]["PostRecord"][];
    };
    PostDetailRecord: {
      id: string;
      prompt: string;
      imageUrl: string;
      sourceImageUrl: string;
      userInfo: components["schemas"]["UserInfo"];
      imageInfo: components["schemas"]["ImageInfo"];
      sourceImageInfo: components["schemas"]["ImageInfo"];
    };
    GetPostResponse: {
      record: components["schemas"]["PostDetailRecord"];
    };
    CreatePostDto: {
      prompt: string;
      documentId: string;
      imageUrl: string;
    };
    CreatePostResponse: {
      id: string;
      prompt: string;
      imageUrl: string;
      sourceImageUrl: string;
      userInfo: components["schemas"]["UserInfo"];
      imageInfo: components["schemas"]["ImageInfo"];
      sourceImageInfo: components["schemas"]["ImageInfo"];
    };
    GenerateTokenDto: {
      userId: number;
    };
    AddOneTimeTokenDto: {
      username: string | null;
      email: string;
    };
    BucketUploadDto: {
      url: string;
      fileName: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  AppController_healthCheck: {
    responses: {
      200: {
        content: never;
      };
    };
  };
  AuthController_authenticateGoogleUser: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AuthenticateGithubUserDto"];
      };
    };
    responses: {
      /** @description Authenticate with Google */
      201: {
        content: {
          "application/json": components["schemas"]["AuthenticateResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Cannot authenticate with Google */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  AuthController_authenticateGithubUser: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AuthenticateGithubUserDto"];
      };
    };
    responses: {
      /** @description Authenticate with Github */
      201: {
        content: {
          "application/json": components["schemas"]["AuthenticateResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Cannot authenticate with Github */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  AuthController_sendEmailForPasswordLess: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SendEmailForPasswordLessDto"];
      };
    };
    responses: {
      201: {
        content: never;
      };
    };
  };
  AuthController_AuthenticatePasswordLessLogin: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["VerifyTokenDto"];
      };
    };
    responses: {
      /** @description Authenticate with Email */
      201: {
        content: {
          "application/json": components["schemas"]["AuthenticateResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Cannot authenticate with Email */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  AuthController_verifyAccessToken: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["VerifyTokenDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["VerifyTokenResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  GeneratorController_predict: {
    parameters: {
      query: {
        prompt: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PredictResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  GeneratorController_scribblePredict: {
    parameters: {
      path: {
        documentId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ScribblePredictBody"];
      };
    };
    responses: {
      201: {
        content: never;
      };
    };
  };
  GeneratorController_CaptionPredict: {
    parameters: {
      path: {
        documentId: string;
      };
    };
    responses: {
      201: {
        content: never;
      };
    };
  };
  DocumentController_getList: {
    parameters: {
      query?: {
        offset?: number;
        limit?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GetDocumentListResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  DocumentController_getOne: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GetDocumentResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  DocumentController_deleteDocument: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  DocumentController_updateDocument: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateDocumentDto"];
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  DocumentController_getImage: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["SaveDocumentResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  DocumentController_saveDocument: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SaveDocumentDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["SaveDocumentResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  DocumentController_saveEmptyDocument: {
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["SaveDocumentResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  PostController_getList: {
    parameters: {
      query?: {
        offset?: number;
        limit?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GetPostListResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  PostController_getListByUser: {
    parameters: {
      query?: {
        offset?: number;
        limit?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GetPostListResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  PostController_getOne: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GetPostResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  PostController_delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  PostController_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreatePostDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["CreatePostResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  PostController_like: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  PostController_unlike: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  TestingController_generateAccessToken: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenerateTokenDto"];
      };
    };
    responses: {
      201: {
        content: never;
      };
    };
  };
  TestingController_getTesting: {
    responses: {
      200: {
        content: never;
      };
    };
  };
  TestingController_generatePasswordLessToken: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddOneTimeTokenDto"];
      };
    };
    responses: {
      201: {
        content: never;
      };
    };
  };
  TestingController_uploadFile: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["BucketUploadDto"];
      };
    };
    responses: {
      201: {
        content: never;
      };
    };
  };
  TestingController_getImageSize: {
    parameters: {
      query: {
        imageUrl: string;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
}
